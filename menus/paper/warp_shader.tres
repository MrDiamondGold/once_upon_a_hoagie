[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform bool overlay = false;

uniform float strength = 1.0;
uniform float time_step = 0.0;

float hash12(vec2 p) {
	vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

float hash13(vec3 p3) {
	p3  = fract(p3 * .1031);
    p3 += dot(p3, p3.zyx + 31.32);
    return fract((p3.x + p3.y) * p3.z);
}


vec2 hash22(vec2 p) {
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);

}

float noise(vec3 x) {
    vec3 p = floor(x);
    vec3 f = smoothstep(0., 1., fract(x));

    return mix( mix( mix( hash13(p + vec3(0,0,0)), hash13(p + vec3(1,0,0)), f.x),
                     mix( hash13(p + vec3(0,1,0)), hash13(p + vec3(1,1,0)), f.x), f.y),
                mix( mix( hash13(p + vec3(0,0,1)), hash13(p + vec3(1,0,1)), f.x),
                     mix( hash13(p + vec3(0,1,1)), hash13(p + vec3(1,1,1)), f.x), f.y), f.z);
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv) {
	vec2 offset = vec2(noise(vec3(uv.x + uv.y + time_step)), noise(vec3(uv.x - uv.y - time_step)));
	offset *= distance(vec2(uv.x, uv.x), vec2(0.5, 0.5)) * 2.0;
	
	return uv + (offset * strength);
}

void fragment() {
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	
	vec4 text;
	text = texture(SCREEN_TEXTURE, text_uv);
	text.a = 1.0;
	
	uv = warp(UV);
	
//	text.rgb *= border(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
//	if (clip_warp)
//	{
//		text.a = border(uv);
//	}
	
	COLOR = text;
}"

[resource]
shader = SubResource( 1 )
shader_param/overlay = true
shader_param/strength = 0.01
shader_param/time_step = 0.0
